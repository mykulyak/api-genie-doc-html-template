---
interface Props {
  class?: string;
}

const { class: className }: Props = Astro.props;
---

<div
  class:list={[
    "w-80",
    "flex",
    "flex-col",
    "p-4",
    "bg-sidebar",
    "h-full",
    className,
  ]}
>
  <div class="overflow-y-scroll flex-none min-h-0 h-full">
    <slot />
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const currentHash = location.hash;
    const triggerElemList = document.querySelectorAll("[data-sidebar-trigger]");

    function toggleGroup(groupElem: HTMLElement, state?: boolean) {
      groupElem
        .querySelector("[data-sidebar-children]")
        ?.classList.toggle("hidden", state);
      groupElem
        .querySelector("[data-sidebar-chevron]")
        ?.classList.toggle("rotate-180", state);

      if (state === true) {
        groupElem.dataset.sidebarOpen = "false";
      } else if (state === false) {
        groupElem.dataset.open = "true";
      } else {
        groupElem.dataset.sidebarOpen =
          groupElem.dataset.sidebarOpen === "true" ? "false" : "true";
      }
    }

    triggerElemList.forEach((triggerElem) => {
      const groupElem = triggerElem.closest("[data-sidebar-group]");

      let hide = true;
      groupElem?.querySelectorAll("a").forEach((linkElem) => {
        hide = hide && currentHash !== new URL(linkElem.href).hash;
      });

      toggleGroup(groupElem as HTMLElement, hide);
    });

    triggerElemList.forEach((elem) => {
      elem.addEventListener("click", (event) => {
        const thisGroupElem = (event.target as HTMLElement)?.closest(
          "[data-sidebar-group]"
        );

        triggerElemList.forEach((triggerElem) => {
          const groupElem = triggerElem.closest("[data-sidebar-group]");
          toggleGroup(
            groupElem as HTMLElement,
            groupElem === thisGroupElem ? undefined : true
          );
        });
      });
    });
  });
</script>
