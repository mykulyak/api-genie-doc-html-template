---
import { useTranslation } from "../i18n";

interface Props {
  allowedMethods?: string[];
}

const { allowedMethods = [] } = Astro.props;
const __ = useTranslation(Astro.url);
---

<form name="search" method="get" action="#">
  <label>{__("searchForm.method.label")}</label>
  <div>
    {
      allowedMethods.includes("GET") && (
        <span>
          <input type="checkbox" name="method" value="GET" id="method-get" />
          <label for="method-get">{__("searchForm.get.label")}</label>
        </span>
      )
    }
    {
      allowedMethods.includes("POST") && (
        <span>
          <input type="checkbox" name="method" value="POST" id="method-post" />
          <label for="method-post">{__("searchForm.post.label")}</label>
        </span>
      )
    }
    {
      allowedMethods.includes("PUT") && (
        <span>
          <input type="checkbox" name="method" value="PUT" id="method-put" />
          <label for="method-put">{__("searchForm.put.label")}</label>
        </span>
      )
    }
    {
      allowedMethods.includes("DELETE") && (
        <span>
          <input
            type="checkbox"
            name="method"
            value="DELETE"
            id="method-delete"
          />
          <label for="method-delete">{__("searchForm.delete.label")}</label>
        </span>
      )
    }
    {
      allowedMethods.includes("PATCH") && (
        <span>
          <input
            type="checkbox"
            name="method"
            value="PATCH"
            id="method-patch"
          />
          <label for="method-patch">{__("searchForm.patch.label")}</label>
        </span>
      )
    }
    {
      allowedMethods.includes("OPTIONS") && (
        <span>
          <input
            type="checkbox"
            name="method"
            value="OPTIONS"
            id="method-options"
          />
          <label for="method-options">{__("searchForm.options.label")}</label>
        </span>
      )
    }
    {
      allowedMethods.includes("HEAD") && (
        <span>
          <input type="checkbox" name="method" value="HEAD" id="method-head" />
          <label for="method-head">{__("searchForm.head.label")}</label>
        </span>
      )
    }
    {
      allowedMethods.includes("TRACE") && (
        <span>
          <input
            type="checkbox"
            name="method"
            value="TRACE"
            id="method-trace"
          />
          <label for="method-trace">{__("searchForm.trace.label")}</label>
        </span>
      )
    }
  </div>

  <label>{__("searchForm.url.label")}</label>
  <input
    type="text"
    name="url"
    placeholder={__("searchForm.url.placeholder")}
  />

  <button type="submit" class="bg-blue-700 px-3 py-1 rounded text-white"
    >{__("searchForm.button")}</button
  >
</form>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.forms.namedItem("search");

    form?.addEventListener("submit", (event) => {
      event.preventDefault();
      event.stopPropagation();

      const formData = new FormData(form);

      const allowedMethods = new Set(formData.getAll("method"));
      const queryString = (formData.get("url") as string).toLowerCase();

      const nodes = form
        .closest("[data-search-root]")
        ?.querySelectorAll("tbody tr[data-search-method]");

      if (allowedMethods.size || queryString.length > 3) {
        nodes?.forEach((rowElem) => {
          const methodAllowed =
            !allowedMethods.size ||
            allowedMethods.has(
              (rowElem as HTMLElement).dataset.searchMethod as string
            );
          const urlAllowed =
            queryString.length < 3 ||
            (rowElem as HTMLElement).innerText
              .toLowerCase()
              .includes(queryString);

          rowElem.classList.toggle("hidden", !(methodAllowed && urlAllowed));
        });
      } else {
        nodes?.forEach((rowElem) => {
          rowElem.classList.toggle("hidden", false);
        });
      }
    });
  });
</script>
