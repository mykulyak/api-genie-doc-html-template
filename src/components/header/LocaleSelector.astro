---
import localeCode from "iso-639-1";

export interface Props {
  options: Array<{
    label: string;
    href: string;
  }>;
  value: string;
}

const { options, value } = Astro.props;

const finalOptions = options.map((opt) => {
  const nativeNameMapping: Record<string, string> = {
    ua: 'uk',
  };
  const nativeName = localeCode.getNativeName(nativeNameMapping[opt.label] || opt.label);

  const flagMapping: Record<string, string> = {
    en: 'gb',
  };
  const flag = flagMapping[opt.label] || opt.label;

  const finalFlag = String.fromCodePoint(
    ...[...flag.toUpperCase()].map(
      (c) => c.charCodeAt(0) - "A".charCodeAt(0) + 0x1f1e6
    )
  );

  return {
    label: finalFlag + ' ' + nativeName,
    href: opt.href,
  };
});
---

<api-genie-locale-selector>
  <select>
    {
      finalOptions.map((option) => (
        <option value={option.href} selected={option.href == value}>
          {option.label}
        </option>
      ))
    }
  </select>
</api-genie-locale-selector>

<script>
  class LocaleSelector extends HTMLElement {
    constructor() {
      super();
      const selectEl = this.querySelector("select");
      if (selectEl) {
        selectEl.addEventListener("change", (event) => {
          console.log(event);
          if (event.currentTarget instanceof HTMLSelectElement) {
            try {
              const url = new URL(
                event.currentTarget.value,
                window.location.origin
              );
              url.hash = window.location.hash;
              window.location.href = url.toString();
            } catch (err) {
              window.location.href = event.currentTarget.value;
            }
          }
        });
      }
    }
  }

  customElements.define("api-genie-locale-selector", LocaleSelector);
</script>
