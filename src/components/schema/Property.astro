---
import { Icon } from "astro-icon/components";
import KVPair from "./KVPair.astro";
import { useTranslation } from "../../i18n";

interface Props {
  name: string;
  // generic
  type: string;
  required?: boolean;
  allowedValues?: (string | number | boolean | null)[];
  hasChildren?: boolean;
  // numeric
  minimum?: number;
  maximum?: number;
  multipleOf?: number;
  // string
  minLength?: number;
  maxLength?: number;
  // array
  minItems?: number;
  maxItems?: number;
  // object
  minProperties?: number;
  maxProperties?: number;
  example?: null | boolean | number | string;
}

const {
  name,
  type,
  required,
  allowedValues,
  hasChildren,
  minimum,
  maximum,
  multipleOf,
  minLength,
  maxLength,
  minItems,
  maxItems,
  minProperties,
  maxProperties,
  example,
} = Astro.props;

const hasLimits =
  (allowedValues != null && allowedValues.length > 0) ||
  minimum != null ||
  maximum != null ||
  multipleOf != null ||
  minLength != null ||
  maxLength != null ||
  minItems != null ||
  maxItems != null ||
  minProperties != null ||
  maxProperties != null;

const __ = useTranslation(Astro.url);
---

<div class="py-3 border-t-[1px] flex flex-col gap-2">
  <div>
    <span class="font-bold bg-slate-200 py-1 px-2 rounded-[4px]">{name}</span>
    <span class="text-slate-500 ml-2">{type}</span>
    {
      required && (
        <span class="text-red-800 ml-2">{__("property.required")}</span>
      )
    }
  </div>

  {
    Astro.slots.has("description") && (
      <div class="leading-tight">
        <slot name="description" />
      </div>
    )
  }

  {
    hasLimits && (
      <div class="flex gap-2">
        {minimum != null && (
          <KVPair title={__("kvpair.minimum")} value={minimum} />
        )}
        {maximum != null && (
          <KVPair title={__("kvpair.maximum")} value={maximum} />
        )}
        {multipleOf != null && (
          <KVPair title={__("kvpair.multipleOf")} value={multipleOf} />
        )}
        {minLength != null && (
          <KVPair title={__("kvpair.minLength")} value={minLength} />
        )}
        {maxLength != null && (
          <KVPair title={__("kvpair.maxLength")} value={maxLength} />
        )}
        {minItems != null && (
          <KVPair title={__("kvpair.minItems")} value={minItems} />
        )}
        {maxItems != null && (
          <KVPair title={__("kvpair.maxItems")} value={maxItems} />
        )}
        {minProperties != null && (
          <KVPair title={__("kvpair.minProperties")} value={minProperties} />
        )}
        {maxProperties != null && (
          <KVPair title={__("kvpair.maxProperties")} value={maxProperties} />
        )}
        {allowedValues != null && allowedValues.length > 0 && (
          <KVPair title={__("kvpair.allowedValues")} value={allowedValues} />
        )}
      </div>
    )
  }

  {example != null && <KVPair title={__('kvpair.example')} value={example} />}

  {
    hasChildren && (
      <Fragment>
        <div class="cursor-pointer justify-center" data-toggle="trigger">
          <span class="rotate-180 inline-block" data-toggle="chevron">
            <Icon name="chevron-up" size={16} />
          </span>
          <span>{__('property.showChildren')}</span>
        </div>
        <div class="hidden pl-4" data-toggle="target">
          <slot />
        </div>
      </Fragment>
    )
  }
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll('[data-toggle="trigger"]').forEach((target) => {
      target.addEventListener("click", () => {
        target.parentElement
          ?.querySelector('[data-toggle="target"]')
          ?.classList.toggle("hidden");
        target
          ?.querySelector('[data-toggle="chevron"]')
          ?.classList.toggle("rotate-180");
      });
    });
  });
</script>
